;;SIMULATOR: VERSION 1

to write-Matrix
  file-open (word  directory-of-results  "-" the-random-seed "-" "follow-Matrix-" (total-number-of-turns / 60)  ".csv")  
           
           let matrix-list []
           ;create a CSV value version o
           let rowCount 0
           let colCount 0 
           let val 0
           
           
           file-type "Source "  file-type ", " file-type "Target "  file-type "\n"
           repeat number-of-agents [ 
                  
                  repeat number-of-documents [ 
                   set val matrix:get like-matrix rowCount colCount 
                   if  (val = 1)
                   [file-type rowCount + 1  file-type ", " file-type  number-of-agents + colCount + 1 file-type "\n" ]
                     
                            
                  ;file-type val  file-type ", "            
                   set colCount   (colCount + 1) mod number-of-documents    
                  ]
            set  rowCount rowCount + 1  
            ;file-type "\n"     
           ]  
       file-close      
       
end

to write-producer-payoff
  file-open (word  directory-of-results "-" the-random-seed "-" "payoff.csv")  
       file-type mean [score] of turtles with  [not document?   and  turtleType = "consumer" ] file-type " , " 
       file-type  mean [point] of turtles with [not document?   and  turtleType = "producer" ] file-type "\n " 
  file-close       
       
end


to write-payoff
  file-open (word  directory-of-results "-" the-random-seed "-" "payoff.csv")  
       file-type mean [score] of turtles with  [not document? and  tags = [1] and turtleType = "consumer" ] file-type " , " 
       file-type   mean  [score] of turtles with [not document? and tags = [0] and turtleType = "consumer" ] file-type "\n " 
       
  file-close       
       
end

to write-numofLikesPerTag
  
 file-open (word  directory-of-results "-" the-random-seed "-" "numOfLikesPerTag.csv")
       file-type (count connect-links with [member? end2 documents = true  and  [tags] of end2 = [1]] / 200)  file-type " , " 
       file-type (count connect-links with [member? end2 documents = true  and  [tags] of end2 = [0]] / 200)  file-type "\n "
 file-close     
           
end

to write-numofFollowersPerTag
  
 file-open (word  directory-of-results "-" the-random-seed "-" "numofFollowersPerTag.csv")
       file-type (count connect-links with [member? end2 documents = false  and  [tags] of end2 = [1]] / 200)  file-type " , " 
       file-type (count connect-links with [member? end2 documents = false  and  [tags] of end2 = [0]] / 200)  file-type "\n "
 file-close     
           
end

to write-numofLikesPerDoc
  
       file-open (word  directory-of-results  "-" the-random-seed "-" "numOflikesPerDoc-" (total-number-of-turns / 60)  ".csv")  
           let turtleCount 0
           repeat number-of-documents [ 
            set  turtleCount turtleCount + 1 
           ask turtle turtleCount [file-print count my-in-connect-links]]   
       file-close    
end

to write-numofFollowersPerPeer
  
       file-open (word  directory-of-results  "-" the-random-seed "-" "numofFollowersPerPeer-" (total-number-of-turns / 60)  ".csv")  
           let turtleCount number-of-documents - 1 
           repeat number-of-agents [ 
            set  turtleCount turtleCount + 1 
           ask turtle turtleCount [file-print count my-in-connect-links]]   
       file-close    
end
